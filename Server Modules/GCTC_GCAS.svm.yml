ServerModule:
  Name:               GCTC_GCASSETS_SCRUD_ServerModule
  Target Platform:    Windows/IBM i/Linux

  Multilingual Details:
  - ENG:
      Description:        "Server Module"

  - FRA:
      Description:        "Server Module"

  Source: |
    * ---------------------------------------------------------------------------------
    * This is a server module in framework GRIFFIN Framework.
    * It belongs to business object Assets.
    * Created 26th September 2018 by USERID with Material Design style controls.
    * This diagram indicates how and where it is used:
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide3.PNG width=1000 height=563
    * Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area.
    *       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”.
    * ---------------------------------------------------------------------------------
    Begin_Com Role(*EXTENDS #PRIM_SRVM) Sessionidentifier('VLFONE')
    * ---------------------------------------------------------------------------------
    * Declare the shared server system manager. It must be declared exactly this
    * way in any server modules or reusable parts that want to use it.
    Define_Com Class(#GC_ServerSystemManager) Name(#ServerSystemManager) Scope(*APPLICATION)
    * These strings coming from the logon validator. They allow the logon validator to pass information
    * into your shared server system manager. For example, an IBM i library list to be used, or
    * details about the currently logged on user or other system states.
    Define Field(#Persistent_ApplicationString1) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString2) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString3) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString4) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString5) Type(*NVARCHAR)
    Define Field(#Persistent_EventDetails) Reffld(#std_strng)
    
    Persist Fields(#Persistent_ApplicationString1 #Persistent_ApplicationString2 #Persistent_ApplicationString3 #Persistent_ApplicationString4 #Persistent_ApplicationString5 #Persistent_EventDetails)
    
    * ---------------------------------------------------------------------------------
    * Use expandable groups to accomodate easier maintenance
    Group_By Name(#XG_InstanceListColumns) Fields(#PropertyName #PropertyAddress #PropertyID #vLocation #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyState)
    Group_By Name(#XG_AccessKeys) Fields(#PropertyID)
    Group_By Name(#XG_EditableDataItems) Fields(#PropertyID #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyOfficeSF #PropertyOfficePercent #PropertyIndustrialSF #PropertyIndustrialPercent #PropertyAcres #PropertyFAR #PropertyType2 #PropertyType3 #PropertyType4 #PropertyFloors #PropertyTypeMaterial)
    Group_By Name(#XG_ReadOnlyDataItems) Fields(#vLocation)
    Group_By Name(#XG_AllDataItems) Fields(#XG_EditableDataItems #XG_ReadOnlyDataItems)
    
    * ---------------------------------------------------------------------------------
    Define Field(#InstanceList_Count) Reffld(#Std_Int)
    Def_List Name(#InstanceList_Columns) Fields(#XG_InstanceListColumns) Counter(#InstanceList_Count) Type(*WORKING) Entrys(*MAX)
    * ---------------------------------------------------------------------------------
    
    Def_List Name(#AllDataItems) Fields(#XG_AllDataItems) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#EditableDataItems) Fields(#XG_EditableDataItems) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#ReadOnlyDataItems) Fields(#XG_ReadOnlyDataItems) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#AccessKeys) Fields(#XG_AccessKeys) Type(*WORKING) Entrys(1)
    Define Field(#ServerModuleResult) Type(*BOOLEAN)
    
    * ---------------------------------------------------------------------------------
    Define_Com Class(#Prim_dc.UnicodeString) Name(#SingularName) Value('Asset')
    Define_Com Class(#Prim_dc.UnicodeString) Name(#PluralName) Value('Assets')
    
    * ---------------------------------------------------------------------------------
    Srvroutine Name(LoadInstanceListData) Session(*REQUIRED)
    List_Map For(*OUTPUT) List(#InstanceList_Columns)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    Define_Com Class(#vf_elretc) Name(#Io_Status)
    Define_Com Class(#Prim_dc.UnicodeString) Name(#ResultMessage)
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide4.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Clr_List Named(#InstanceList_Columns)
    
    Select Fields(#InstanceList_Columns) From_File(GCAssets) Io_Status(#Io_Status) Io_Error(*NEXT)
    Add_Entry To_List(#InstanceList_Columns)
    Endselect
    
    Case (#Io_Status)
    When (= EF)
    #ResultMessage := *MTXTUF_MSG_0001.Substitute( #InstanceList_Count.AsString #PluralName )
    #ServerModuleResult := True
    Otherwise
    #ResultMessage := *MTXTUF_MSG_0002.Substitute( #PluralName )
    Endcase
    
    Message Msgtxt(#ResultMessage)
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine
    
    Endroutine
    
    * ---------------------------------------------------------------------------------
    Srvroutine Name(GetData) Session(*REQUIRED)
    List_Map For(*INPUT) List(#AccessKeys)
    Field_Map For(*INPUT) Field(#Std_Flag) Parameter_Name(i_GetLatLong)
    List_Map For(*OUTPUT) List(#AllDataItems)
    List_Map For(*OUTPUT) List(#CompList)
    List_Map For(*OUTPUT) List(#ContactList)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    Define_Com Class(#vf_elretc) Name(#Io_Status)
    Define_Com Class(#Prim_dc.UnicodeString) Name(#ResultMessage)
    
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide5.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Get_Entry Number(1) From_List(#AccessKeys)
    
    Fetch Fields(#AllDataItems) From_File(GCAssets) With_Key(#XG_AccessKeys) Io_Status(#Io_Status) Io_Error(*NEXT)
    
    Case (#Io_Status)
    When (= OK)
    Add_Entry To_List(#AllDataItems)
    
    Def_List Name(#CompList) Fields(#CompID #CompType #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyOfficeSF #PropertyOfficePercent #PropertyIndustrialSF #PropertyIndustrialPercent #PropertyAcres #PropertyFAR #PropertyType2 #PropertyFloors #PropertyTypeMaterial #PropertyLastRedone #PropertyType3 #PropertySpaces #PropertySpacesAvailable #Property1000SF #PropertyDocks #PropertySFLoading #PropertyLoadingDocks #PropertyCeiling #PropertyHeight #CompDate #CompPrice #vLocation) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#ContactList) Fields(#ContactID #ContactFirstName #ContactLastName #ContactTitle #ContactAddress #ContactCity #ContactState #ContactPhone #ContactMobile #ContactEmail #vLocation #vFullName) Type(*WORKING) Entrys(*MAX)
    
    Select Fields(#CompID) From_File(GCCompByProperty) With_Key(#PropertyID)
    Fetch Fields(*ALL) From_File(GCComp) With_Key(#CompID)
    Add_Entry To_List(#CompList)
    Endselect
    
    Select Fields(#ContactID) From_File(GCContactByProperty) With_Key(#PropertyID)
    Fetch Fields(*ALL) From_File(GCContacts) With_Key(#ContactID)
    Add_Entry To_List(#ContactList)
    Endselect
    
    
    #ServerModuleResult := True
    When (= NR)
    #ResultMessage := *MTXTUF_MSG_0003.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Message Msgtxt(#ResultMessage)
    Otherwise
    #ResultMessage := *MTXTUF_MSG_0004.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Message Msgtxt(#ResultMessage)
    Endcase
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    Srvroutine Name(GetPropretyInfo)
    Field_Map For(*INPUT) Field(#GAddrID)
    Group_Map For(*OUTPUT) Group(#PropertyInfo)
    
    Group_By Name(#PropertyInfo) Fields(#CompID #CompType #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyOfficeSF #PropertyOfficePercent #PropertyIndustrialSF #PropertyIndustrialPercent #PropertyAcres #PropertyFAR #PropertyType2 #PropertyFloors #PropertyTypeMaterial #PropertyLastRedone #PropertyType3 #PropertySpaces #PropertySpacesAvailable #Property1000SF #PropertyDocks #PropertySFLoading #PropertyLoadingDocks #PropertyCeiling #PropertyHeight #CompDate #CompPrice #vLocation)
    
    If (#GAddrID.Substring( 1 1 ) = "C")
    #CompID := #GAddrID
    Fetch Fields(*ALL) From_File(GCComp) With_Key(#CompID)
    Else
    #PropertyID := #GAddrID
    Fetch Fields(*ALL) From_File(GCAssets) With_Key(#PropertyID)
    Endif
    
    Endroutine
    
    * ---------------------------------------------------------------------------------
    Srvroutine Name(GetAddresses) Session(*REQUIRED)
    List_Map For(*INPUT) List(#AccessKeys)
    List_Map For(*OUTPUT) List(#AllAddresses)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    Def_List Name(#AllAddresses) Fields(#PropertyAddress #PropertyCity #PropertyState #PropertyZip #xDemoLatitude #xDemoLongitude #GAddrID #vLocation) Type(*WORKING)
    
    Define_Com Class(#vf_elretc) Name(#Io_Status)
    Define_Com Class(#Prim_dc.UnicodeString) Name(#ResultMessage)
    
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide5.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Get_Entry Number(1) From_List(#AccessKeys)
    
    Fetch Fields(#AllDataItems) From_File(GCAssets) With_Key(#XG_AccessKeys) Io_Status(#Io_Status) Io_Error(*NEXT)
    #GAddrID := #PropertyID
    Fetch Fields(#xDemoLatitude #xDemoLongitude #GAddrID) From_File(GLatLong) With_Key(#GAddrID) Io_Status(#Io_Status) Io_Error(*NEXT)
    Add_Entry To_List(#AllAddresses)
    
    Case (#Io_Status)
    When (= OK)
    
    Select Fields(#CompID) From_File(GCCompByProperty) With_Key(#PropertyID)
    Fetch Fields(*ALL) From_File(GCComp) With_Key(#CompID)
    Fetch Fields(#xDemoLatitude #xDemoLongitude #GAddrID) From_File(GLatLong) With_Key(#CompID)
    Add_Entry To_List(#AllAddresses)
    Endselect
    
    
    #ServerModuleResult := True
    When (= NR)
    #ResultMessage := *MTXTUF_MSG_0003.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Message Msgtxt(#ResultMessage)
    Otherwise
    #ResultMessage := *MTXTUF_MSG_0004.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Message Msgtxt(#ResultMessage)
    Endcase
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    * ---------------------------------------------------------------------------------
    Srvroutine Name(InitializeNewData) Session(*REQUIRED)
    List_Map For(*OUTPUT) List(#AllDataItems)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide8.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Change Field(#AllDataItems) To(*SQLNULL)
    
    Add_Entry To_List(#AllDataItems)
    
    #ServerModuleResult := True
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    
    
    * ---------------------------------------------------------------------------------
    Srvroutine Name(PutData) Session(*REQUIRED)
    List_Map For(*INPUT) List(#EditableDataItems)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    Define_Com Class(#vf_elretc) Name(#Io_Status)
    Define_Com Class(#Prim_dc.UnicodeString) Name(#ResultMessage)
    
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide6.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Get_Entry Number(1) From_List(#EditableDataItems)
    
    Check_For In_File(GCAssets) With_Key(#XG_AccessKeys) Io_Status(#Io_Status) Io_Error(*NEXT)
    
    Case (#Io_Status)
    When (= EQ)
    Update Fields(#EditableDataItems) In_File(GCAssets) With_Key(#XG_AccessKeys) Io_Status(#Io_Status) Io_Error(*NEXT)
    When (= NE)
    Insert Fields(#EditableDataItems) To_File(GCAssets) Io_Status(#Io_Status) Io_Error(*NEXT)
    Endcase
    
    Case (#Io_Status)
    When (= OK)
    #ResultMessage := *MTXTUF_MSG_0005.Substitute( #SingularName #Com_Self.VisibleIdentification )
    #ServerModuleResult := True
    When (= VE)
    #ResultMessage := *MTXTUF_MSG_0006.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Otherwise
    #ResultMessage := *MTXTUF_MSG_0007.Substitute( #SingularName #Com_Self.VisibleIdentification #Io_Status )
    Endcase
    
    Message Msgtxt(#ResultMessage)
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    
    * ---------------------------------------------------------------------------------
    Srvroutine Name(DeleteData) Session(*REQUIRED)
    List_Map For(*INPUT) List(#AccessKeys)
    Field_Map For(*OUTPUT) Field(#ServerModuleResult)
    
    Define_Com Class(#vf_elretc) Name(#Io_Status)
    Define_Com Class(#Prim_dc.UnicodeString) Name(#ResultMessage)
    
    * Annotate Img=%partdir%VF_UM501_AutoScrud_Slide7.PNG width=1000 height=339
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * Process the request
    Get_Entry Number(1) From_List(#AccessKeys)
    
    Delete From_File(GCAssets) With_Key(#XG_AccessKeys) Io_Status(#Io_Status) Io_Error(*NEXT)
    
    Case (#Io_Status)
    When (= OK)
    #ResultMessage := *MTXTUF_MSG_0008.Substitute( #SingularName #Com_Self.VisibleIdentification )
    #ServerModuleResult := True
    When (= NR)
    #ResultMessage := *MTXTUF_MSG_0003.Substitute( #SingularName #Com_Self.VisibleIdentification )
    Otherwise
    #ResultMessage := *MTXTUF_MSG_0007.Substitute( #SingularName #Com_Self.VisibleIdentification #Io_Status )
    Endcase
    
    Message Msgtxt(#ResultMessage)
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    
    * ---------------------------------------------------------------------------------
    Mthroutine Name(VisibleIdentification) Access(*PRIVATE)
    Define_Map For(*RESULT) Class(#Prim_dc.UnicodeString) Name(#Result)
    #Result := #PropertyID
    Endroutine
    
    
    Srvroutine Name(GetStatistics)
    Group_Map For(*OUTPUT) Group(#AssetStats)
    Group_By Name(#AssetStats) Fields(#GCTotalSquaeFootage #GCWeightedSQ #GCWeightedAverage #GCPortfolioAvailCal #GCPortfolioAvailability)
    #GCTotalSquaeFootage #GCWeightedSQ := 0
    Select Fields(*ALL) From_File(GCAssets)
    #GCTotalSquaeFootage += #PropertyTotalSF
    #GCWeightedSQ := #GCWeightedSQ + (#PropertyTotalSF * (#PropertyOccupancy / 100))
    Endselect
    
    #GCWeightedAverage := #GCWeightedSQ / #GCTotalSquaeFootage
    #GCPortfolioAvailCal := #GCWeightedSQ - #GCTotalSquaeFootage
    #GCPortfolioAvailability := #GCPortfolioAvailCal / #GCTotalSquaeFootage
    Endroutine
    
    End_Com
