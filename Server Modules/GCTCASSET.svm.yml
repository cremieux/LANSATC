ServerModule:
  Name:               GCTCAssetServerModule
  Target Platform:    Windows/IBM i/Linux

  Multilingual Details:
  - ENG:
      Description:        "Asset Server module"

  - FRA:
      Description:        "Asset Server module"

  Source: |
    Function Options(*DIRECT)
    Begin_Com Role(*EXTENDS #PRIM_SRVM)
    
    Def_List Name(#GCAssetsList) Fields(#PropertyID #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyOfficeSF #PropertyOfficePercent #PropertyIndustrialSF #PropertyIndustrialPercent #PropertyAcres #PropertyFAR #PropertyType2 #PropertyType3 #PropertyType4 #PropertyFloors #PropertyTypeMaterial #vLocation) Counter(#ListCount) Type(*WORKING) Entrys(*MAX)
    
    Group_By Name(#GCAssets) Fields(#PropertyID #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyTotalSF #PropertyOfficeSF #PropertyOfficePercent #PropertyIndustrialSF #PropertyIndustrialPercent #PropertyAcres #PropertyFAR #PropertyType2 #PropertyType3 #PropertyType4 #PropertyFloors #PropertyTypeMaterial)
    
    Srvroutine Name(Find)
    Field_Map For(*INPUT) Field(#PropertyID)
    Group_Map For(*OUTPUT) Group(#GCAssets)
    Field_Map For(*OUTPUT) Field(#io$sts) Parameter_Name(Status)
    
    * Return all data for the keys provided
    Fetch Fields(#GCAssets) From_File(GCAssets) With_Key(#PropertyID)
    
    Endroutine
    
    Srvroutine Name(FindPage)
    Field_Map For(*INPUT) Field(#StartKey1)
    Field_Map For(*INPUT) Field(#ListPage)
    List_Map For(*OUTPUT) List(#GCAssetsList)
    
    Define Field(#StartKey1) Reffld(#PropertyID)
    
    * Get all records from the file starting from the specified key values
    Select Fields(#GCAssetsList) From_File(GCAssets) With_Key(#StartKey1) Options(*STARTKEY)
    
    * Ignore the first record if it matches the startkey(s)
    Continue If(((#StartKey1 = #PropertyID)))
    
    Add_Entry To_List(#GCAssetsList)
    
    Endselect
    
    Endroutine
    
    Srvroutine Name(FindAll)
    List_Map For(*OUTPUT) List(#GCAssetsList)
    
    Select Fields(#GCAssetsList) From_File(GCAssets)
    
    Add_Entry To_List(#GCAssetsList)
    
    Endselect
    
    Endroutine
    
    Srvroutine Name(FindAllNonCorporate)
    List_Map For(*OUTPUT) List(#GCAssetsList)
    
    Select Fields(#GCAssetsList) From_File(GCAssets)
    
    Continue If(#PropertyID.Contains( 'a' ) Or (#PropertyID.Contains( 'b' )))
    Add_Entry To_List(#GCAssetsList)
    
    Endselect
    
    Endroutine
    
    Srvroutine Name(Save)
    Group_Map For(*INPUT) Group(#GCAssets)
    Field_Map For(*OUTPUT) Field(#io$sts) Parameter_Name(Status)
    
    * Look for an existing record
    Check_For In_File(GCAssets) With_Key(#PropertyID)
    
    * Update the record if found, otherwise create a new one
    If_Status Is(*EQUALKEY)
    
    Update Fields(#GCAssets) In_File(GCAssets) With_Key(#PropertyID)
    
    Else
    
    Insert Fields(#GCAssets) To_File(GCAssets)
    
    Endif
    
    Endroutine
    
    Srvroutine Name(Delete)
    Field_Map For(*INPUT) Field(#PropertyID)
    Field_Map For(*OUTPUT) Field(#io$sts) Parameter_Name(Status)
    
    * Delete a record using the key value
    Delete From_File(GCAssets) With_Key(#PropertyID)
    
    Endroutine
    
    End_Com
