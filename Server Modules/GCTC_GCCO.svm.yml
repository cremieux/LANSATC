ServerModule:
  Name:               GCTC_GCCOMP_SQL_Filter_svrm
  Target Platform:    Windows/IBM i/Linux

  Multilingual Details:
  - ENG:
      Description:        "Server Module"

  - FRA:
      Description:        "Server Module"

  Source: |
    * ---------------------------------------------------------------------------------------------------
    * This is a server module in framework GRIFFIN Framework.
    * It belongs to business object Comps.
    * Created 26th September 2018 by USERID with Material Design style controls.
    * In this usage diagram it is highlighted in ORANGE:
    * Annotate Img=%partdir%VF_UM501_SearchSQL_Slide2.PNG width=1000 height=339
    * Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area.
    *       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”.
    * ---------------------------------------------------------------------------------------------------
    Begin_Com Role(*EXTENDS #PRIM_SRVM) Sessionidentifier('VLFONE')
    * ---------------------------------------------------------------------------------
    * Declare the shared server system manager. It must be declared exactly this
    * way in any server modules or reusable parts that want to use it.
    Define_Com Class(#GC_ServerSystemManager) Name(#ServerSystemManager) Scope(*APPLICATION)
    * These strings coming from the logon validator. They allow the logon validator to pass information
    * into your shared server system manager. For example, an IBM i library list to be used, or
    * details about the currently logged on user or other system states.
    Define Field(#Persistent_ApplicationString1) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString2) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString3) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString4) Type(*NVARCHAR)
    Define Field(#Persistent_ApplicationString5) Type(*NVARCHAR)
    Define Field(#Persistent_EventDetails) Reffld(#std_strng)
    
    Persist Fields(#Persistent_ApplicationString1 #Persistent_ApplicationString2 #Persistent_ApplicationString3 #Persistent_ApplicationString4 #Persistent_ApplicationString5 #Persistent_EventDetails)
    
    * ---------------------------------------------------------------------------------
    Group_By Name(#XG_SearchFields) Fields(#CompID #CompType #PropertyName #PropertyAddress #PropertyCity #PropertyState #PropertyZip #PropertyManager)
    Def_List Name(#SearchFields) Fields(#XG_SearchFields) Type(*WORKING) Entrys(1)
    
    Define Field(#InstanceList_Count) Reffld(#Std_Int)
    Def_List Name(#InstanceList_Columns) Fields(#PropertyName #PropertyAddress #CompID #vLocation #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyState #CompDate #CompPrice #PropertyTotalSF) Counter(#InstanceList_Count) Type(*WORKING) Entrys(*MAX)
    * ---------------------------------------------------------------------------------
    
    Srvroutine Name(Search) Session(*REQUIRED)
    List_Map For(*INPUT) List(#SearchFields)
    List_Map For(*OUTPUT) List(#InstanceList_Columns)
    
    * Field for the SQL Where clause - Note this HAS to be alpha - cannot be unicode
    Define_Com Class(#prim_alph) Name(#WhereClause)
    
    * Field that indicates that all search values are ok
    Define_Com Class(#prim_boln) Name(#Valid) Value(True)
    
    
    * Invoke the server manager to set up the execution context for this server routine
    #ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)
    
    * get the key list data into fields
    Get_Entry Number(1) From_List(#SearchFields)
    
    * Build up the WHERE clause for the SQL
    
    
    * Note: If your ServerSystemManager does not have a uMakeWhereString method routine,
    * then you need to regenerate your ServerSystemManager.
    
    * A) Make a backup copy of your current ServerSystemManager
    * B) Delete your ServerSystemManager component from the repository
    * C) Generate any filter or command handler - this will automatically also create the ServerSystemManager
    
    * Note:
    * The following statements may need to be modified if using a file defined to LANSA as an OTHER file, and the actual field name in the file is different from the identifier or long name given to the field by LANSA.
    * On IBMi server - If the actual field name is different from the lansa identifier, pass the actual field name as uShortname.
    * On other servers - If the actual field name is different from the lansa long name, pass the actual field name as uLongName.
    
    
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(CompID) Ushortname(COMPID) Utype(ALPHA) Uoperator(EQ) Ucomparevalue(#CompID.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(CompType) Ushortname(COMPTYPE) Utype(ALPHA) Uoperator(EQ) Ucomparevalue(#CompType.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyName) Ushortname(PROPERTYN) Utype(ALPHA) Uoperator(CONTAINS) Ucomparevalue(#PropertyName.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyAddress) Ushortname(PROPERTYA) Utype(ALPHA) Uoperator(CONTAINS) Ucomparevalue(#PropertyAddress.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyCity) Ushortname(PROPERTYC) Utype(ALPHA) Uoperator(CONTAINS) Ucomparevalue(#PropertyCity.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyState) Ushortname(PROPERTYS) Utype(ALPHA) Uoperator(EQ) Ucomparevalue(#PropertyState.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyZip) Ushortname(PROPERTYZ) Utype(ALPHA) Uoperator(BEGINS) Ucomparevalue(#PropertyZip.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    #ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(PropertyManager) Ushortname(PROPERTYM) Utype(ALPHA) Uoperator(EQ) Ucomparevalue(#PropertyManager.AsNativeString) Uvalid(#Valid) Uunicode(True) Uignorecase(True)
    
    * Do not do the select if the SQL statement contains possible SQL Injection
    If (#Valid)
    
    If (#WhereClause *NE *blanks)
    Select_Sql Fields(#PropertyName #PropertyAddress #CompID #vLocation #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyState #CompDate #CompPrice #PropertyTotalSF #PropertyCity #PropertyZip) From_Files((GCComp)) Where(#WhereClause)
    #vLocation := #PropertyCity + ", " + #PropertyState + " " + #PropertyZip
    Add_Entry To_List(#InstanceList_Columns)
    Endselect
    Else
    Select_Sql Fields(#PropertyName #PropertyAddress #CompID #vLocation #PropertyManager #PropertyYearBuilt #PropertyTenant #PropertyExpiration #PropertyType #PropertyOccupancy #PropertyState #CompDate #CompPrice #PropertyTotalSF #PropertyCity #PropertyZip) From_Files((GCComp))
    #vLocation := #PropertyCity + ", " + #PropertyState + " " + #PropertyZip
    Add_Entry To_List(#InstanceList_Columns)
    Endselect
    Endif
    
    Else
    Message Msgtxt(*MTXTUF_SQLWARNING)
    Endif
    
    * Invoke the server manager to clean up and finalize the execution context for this server routine
    #ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)
    
    Endroutine
    
    End_Com
